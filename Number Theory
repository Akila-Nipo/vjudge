/*
    Given an integer N, you have to prime factorize N! (factorial N).
Input

    Input starts with an integer T (≤ 125), denoting the number of test cases.

    Each case contains an integer N (2 ≤ N ≤ 100).
Output

    For each case, print the case number and the factorization of the factorial in the following format as given in samples.

    Case x: N = p<sub>1</sub> (power of p<sub>1</sub>) * p<sub>2</sub> (power of p<sub>2</sub>) * ...

    Here x is the case number, p1, p2 … are primes in ascending order.
Sample
    Inputcopy 	Outputcopy

    3
    2
    3
    6

    	

    Case 1: 2 = 2 (1)
    Case 2: 3 = 2 (1) * 3 (1)
    Case 3: 6 = 2 (4) * 3 (2) * 5 (1)

Note

    The output for the 3rd case is (if we replace spaces with .s) Case.3:.6.=.2.(4).*.3.(2).*.5.(1)
*/
#include<bits/stdc++.h>
using namespace std;
int status[1000005]={0};

void siv() {
    int N=200;
    int sq = sqrt(N);

    for (int i = 4; i <= N; i += 2)
    {
        status[i] = 1;
    }

    for (int i = 3; i <= sq; i += 2) {
        if (status[i] == 0) {
            for (int j = i * i; j <= N; j += i)
                status[j] = 1;
        }
    }

    status[1] = 1;
}
int main()
{   siv();
    int t,cs;
    cin>>t;
    for(int cs=1;cs<=t;cs++)
    {
         int n,c=0;
    long long a=1;
    cin>>n;

    map<int,int>mp;
    map<int,int>:: iterator it;
    int nn;
    for(int i=2;i<=n;i++)
    {
        if(status[i]==0)
        {  nn=n;
              while(nn>=i)
        {
            nn=nn/i;
            c+=nn;
            mp[i]=c;
        }
        //cout<<i<<" "<<mp[i]<<"\n";
        mp[i];

        c=0;


    }
    }
    cout<<"Case "<<cs<<": "<<n<<" =";
    for(it=mp.begin();it!=mp.end();it++)
    {


        if(next(it)==mp.end()){cout<<" "<<it->first<<" ("<<it->second<<")\n";break;}
        else  cout<<" "<<it->first<<" ("<<it->second<<") *";

    }


    }
    return 0;

}
